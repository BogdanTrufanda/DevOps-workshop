name: Backend-CI


on:
  pull_request:
    types: [closed]
    branches:
      - main


jobs:
  deploy:
    name: Push backend to EC2 Instance
    runs-on: ubuntu-latest
    

    if: github.event.pull_request.head.ref == 'app'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1


      - name: Check if the EC2 is up, if not start it
        run: |
          if aws ec2 describe-instance-status --instance-id ${{ secrets.INSTANCE_ID }} | grep -q 'running'; then 
            echo "EC2 is up!"; 
          else 
            echo "EC2 is down! Starting it..."
            aws ec2 start-instances --instance-ids ${{ secrets.INSTANCE_ID }}
            until aws ec2 describe-instance-status --instance-id ${{ secrets.INSTANCE_ID }} | grep -q running;
            do
            	sleep 5
            done
          fi


      - name: Checkout the code
        uses: actions/checkout@v2


      - name: Set env
        run: |
          echo "REMOTE_HOST=$(aws ec2 describe-instances --instance-ids ${{ secrets.INSTANCE_ID }} --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)" >> $GITHUB_ENV


      - name: Clean old backend directory on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: rm -rf /home/ubuntu/workshop/backend


      - name: Deploy to my EC2 instance
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          SOURCE: "./workshop/backend"
          REMOTE_HOST: ${{ env.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: "/home/ubuntu/workshop"

